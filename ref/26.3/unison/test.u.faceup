«f:Stream.sum »«k::» «n:'»{«c:Stream» «t:Nat»} () «k:->» «t:Nat»
«:unison-font-lock-keywords:Stream.sum ns =»
  h «k::» «t:Nat» «k:->» «t:Request» {«c:Stream» «t:Nat»} () «k:->» «t:Nat»
  h acc = «k:cases»
    {«:unison-font-lock-keywords:_} -> acc»
    {«:unison-font-lock-keywords:Stream.emit n -> resume} ->»
      «k:handle» resume () «k:with» h (acc + n)
  «k:handle» «n:!»ns «k:with» h «:highlight-numbers-number:0»

«f:Stream.foldLeft »«k::» (b «k:->» a «k:->» b) «k:->» b «k:->» «n:'»{«c:Stream» a} () «k:->» b
«:unison-font-lock-keywords:Stream.foldLeft f b s =»
  h acc = «k:cases»
    {«:unison-font-lock-keywords:_} -> acc»
    {«:unison-font-lock-keywords:Stream.emit a -> resume} ->»
      «k:handle» resume () «k:with» h (f acc a)
  «k:handle» «n:!»s «k:with» h b

«f:Stream.terminated »«k::» «n:'»{«c:Stream» a} () «k:->» «n:'»{«c:Stream» («t:Optional» a)} ()
«:unison-font-lock-keywords:Stream.terminated s _ =»
  h «k::» «t:Request» {«c:Stream» a} () «k:->»{«c:Stream» («t:Optional» a)} ()
  h = «k:cases»
    {«:unison-font-lock-keywords:_} -> emit None»
    {«:unison-font-lock-keywords:Stream.emit a -> resume} ->»
      emit («:unison-font-lock-keywords:Some a)»
      «k:handle» resume () «k:with» h
  «k:handle» «n:!»s «k:with» h

«t:Stream».sum«n:'» = «t:Stream».foldLeft («t:Nat».+) «:highlight-numbers-number:0»

«f:Stream.pipe »«k::» «n:'»{«c:Stream» a} () «k:->» «n:'»{«c:Ask» a, «t:Stream» b} r «k:->» «n:'»{«c:Stream» b} ()
«:unison-font-lock-keywords:Stream.pipe s f _ =»
  h s = «k:cases»
    {«:unison-font-lock-keywords:_} -> ()»
    {«:unison-font-lock-keywords:Ask.ask -> resumeF} ->»
      «k:handle» «n:!»s «k:with» «k:cases»
        {«:unison-font-lock-keywords:_} -> ()»
        {«:unison-font-lock-keywords:Stream.emit a -> resumeS} ->»
          «k:handle» resumeF a «k:with» h resumeS
    {«:unison-font-lock-keywords:Stream.emit b -> resumeF} ->»
      emit b
      «k:handle» resumeF () «k:with» h s
  «k:handle» «n:!»f «k:with» h s

«:unison-font-lock-keywords:Stream.filter f s =»
  go «:unison-font-lock-keywords:_ =»
    a = ask
    «k:if» f a then emit a
    «k:else» «n:!»go
  «:unison-font-lock-keywords:Stream.pipe s go»

«t:Stream».filter.doc = «x:[:
Multiline

documentation
:]»

«x:---

Stream.pipe : '{Stream a} () -> '{Ask a, Stream b} r -> '{Stream b} ()
Stream.pipe s f _ =
  h s = cases
    {_} -> ()
    {Ask.ask -> resumeF} ->
      handle !s with cases
        {_} -> ()
        {Stream.emit a -> resumeS} ->
          handle resumeF a with h resumeS
    {Stream.emit b -> resumeF} ->
      emit b
      handle resumeF () with h s
  handle !f with h s

Stream.filter f s =
  go _ =
    a = ask
    if f a then emit a
    else !go
  Stream.pipe s go

Stream.filter.doc = [:
Multiline

documentation
:]
»